---
import PageLayout from "../../layouts/PageLayout.astro";
import ArticleViewer from "../../components/ArticleViewer.astro";
import articles from "../../data/articles.json";
import topNamedEntities from "../../data/top-named-entities.json";

// Extract unique values for dropdowns
const decades = [...new Set(articles.map(article => article.decade).filter(Boolean))].sort();
const states = [...new Set(articles.map(article => article.state).filter(Boolean))].sort();
const publications = [...new Set(articles.map(article => article.newspaper).filter(Boolean))].sort();
const entities = [...topNamedEntities].sort(); // Alphabetize the entities
---

<PageLayout title="In the News - Visualize the Data" currentPage="visualize">
  <head>
    <meta name="description" content="Explore a searchable archive of historical newspaper articles documenting anti-Chinese violence and exclusion. Filter by decade, state, publication, or named entities to discover contemporary perspectives on these events.">
  </head>
  <div class="container-wide">
    <div class="mb-6">
      <a href="/visualize" class="text-accent hover:text-accent-focus flex items-center gap-2 mb-4">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Visualizations
      </a>
      <h1 class="text-4xl font-bold mb-2">Newspaper Archive</h1>
      <p class="text-lg text-gray-600 mb-6">
        Explore historical newspaper articles documenting events and patterns in our dataset. 
        Filter by decade, state, publication, or named entities to discover contemporary perspectives.
      </p>
    </div>

    <!-- Filter and Sort Controls -->
    <div class="bg-amber-50/90 border-2 border-amber-200 rounded-lg p-4 mb-6 shadow-lg">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <!-- Filter Section -->
        <div class="lg:col-span-2">
          <div class="bg-white rounded-lg p-3 border border-amber-300">
            <h3 class="text-lg font-semibold mb-3 text-amber-800 border-b border-amber-200 pb-2">Filters</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div class="form-control">
                <label class="label">
                  <span class="label-text font-medium text-amber-800">Decade</span>
                </label>
                <select id="filter-decade" class="select select-bordered w-full border-2 border-amber-300 bg-amber-50">
                  <option value="">All Decades</option>
                  {decades.map(decade => <option value={decade}>{decade}</option>)}
                </select>
              </div>
              <div class="form-control">
                <label class="label">
                  <span class="label-text font-medium text-amber-800">Publication State</span>
                </label>
                <select id="filter-state" class="select select-bordered w-full border-2 border-amber-300 bg-amber-50">
                  <option value="">All States</option>
                  {states.map(state => <option value={state}>{state}</option>)}
                </select>
              </div>
              <div class="form-control">
                <label class="label">
                  <span class="label-text font-medium text-amber-800">Publication Title</span>
                </label>
                <select id="filter-publication" class="select select-bordered w-full border-2 border-amber-300 bg-amber-50">
                  <option value="">All Publications</option>
                  {publications.map(pub => <option value={pub}>{pub}</option>)}
                </select>
              </div>
              <div class="form-control">
                <label class="label">
                  <span class="label-text font-medium text-amber-800">Top Named Entities</span>
                </label>
                <select id="filter-entities" class="select select-bordered w-full border-2 border-amber-300 bg-amber-50">
                  <option value="">All Entities</option>
                  {entities.map(entity => <option value={entity}>{entity}</option>)}
                </select>
              </div>
            </div>
            <div class="flex justify-end mt-3">
              <button id="clear-filters" class="px-4 py-2 bg-amber-100 hover:bg-amber-200 text-amber-800 font-medium rounded-md shadow-sm hover:shadow-md transition-all duration-200 border border-amber-300 hover:border-amber-400 flex items-center gap-2 text-sm">
                Clear All Filters
              </button>
            </div>
          </div>
        </div>

        <!-- Sort Section -->
        <div>
          <div class="bg-white rounded-lg p-3 border border-amber-300 h-full">
            <h3 class="text-lg font-semibold mb-3 text-amber-800 border-b border-amber-200 pb-2">Sort Options</h3>
            <div class="form-control">
              <label class="label">
                <span class="label-text font-medium text-amber-800">Sort By</span>
              </label>
              <select id="sort-by" class="select select-bordered w-full border-2 border-amber-300 bg-amber-50">
                <option value="date">Publication Date</option>
                <option value="state">State</option>
                <option value="title">Article Title</option>
                <option value="newspaper">Newspaper Title</option>
              </select>
            </div>
            <div class="form-control mt-3">
              <label class="label">
                <span class="label-text font-medium text-amber-800">Order</span>
              </label>
              <select id="sort-order" class="select select-bordered w-full border-2 border-amber-300 bg-amber-50">
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
              </select>
            </div>
          </div>
        </div>
      </div>
      <div class="mt-3 text-sm text-amber-700 bg-amber-100 rounded-lg p-2 text-center">
        <span id="results-count">Showing all {articles.length} articles</span>
      </div>
    </div>

    <!-- Article Cards Grid -->
    <div id="cards-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"></div>

    <!-- Article Viewer Component -->
    <ArticleViewer />

    <!-- Loading State -->
    <div id="loading" class="hidden text-center py-12">
      <div class="loading loading-spinner loading-lg"></div>
      <p class="mt-4 text-gray-600">Loading articles...</p>
    </div>

    <!-- No Results State -->
    <div id="no-results" class="hidden text-center py-12">
      <div class="text-gray-400 mb-4">
        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
      </div>
      <h3 class="text-xl font-semibold mb-2">No articles found</h3>
      <p class="text-gray-600 mb-4">Try adjusting your filters or clearing them to see all articles.</p>
      <button id="reset-filters" class="btn btn-outline">Show All Articles</button>
    </div>
  </div>

  <script define:vars={{ articles, entities }}>
    const container = document.getElementById('cards-container');
    const decadeInput = document.getElementById('filter-decade');
    const stateInput = document.getElementById('filter-state');
    const publicationInput = document.getElementById('filter-publication');
    const entitiesInput = document.getElementById('filter-entities');
    const sortByInput = document.getElementById('sort-by');
    const sortOrderInput = document.getElementById('sort-order');
    const clearBtn = document.getElementById('clear-filters');
    
    
    const resultsCount = document.getElementById('results-count');
    const loading = document.getElementById('loading');
    const noResults = document.getElementById('no-results');
    



    function formatDate(dateString) {
      if (!dateString) return '';
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
    }

    function renderCards(filtered) {
      container.innerHTML = '';
      
      if (filtered.length === 0) {
        container.classList.add('hidden');
        noResults.classList.remove('hidden');
        resultsCount.textContent = 'No articles found';
        return;
      }

      container.classList.remove('hidden');
      noResults.classList.add('hidden');
      resultsCount.textContent = `Showing ${filtered.length} of ${articles.length} articles`;

      filtered.forEach((article, index) => {
        const card = document.createElement('div');
        card.className = 'card bg-base-100 shadow-md hover:shadow-lg transition-shadow cursor-pointer border border-base-300';
        card.innerHTML = `
          <div class="card-body p-4">
            <div class="flex justify-between items-start mb-3">
              <h3 class="card-title text-base font-semibold line-clamp-3 flex-1 mr-3">${article['article-title'] || 'Untitled'}</h3>
              <span class="badge badge-primary badge-sm flex-shrink-0">${article['publication-year'] || 'Unknown'}</span>
            </div>
            <p class="text-sm text-gray-600 mb-2">
              <span class="font-medium">${article.newspaper || 'Unknown Publication'}</span>${article['newspaper-location'] ? ` (${article['newspaper-location']})` : ''}
            </p>
            <p class="text-sm text-gray-500 mb-3">
              ${formatDate(article['publication-date'])}${article.page ? ` (Page ${article.page})` : ''}
            </p>
            <div class="summary-container relative">
              <p class="text-sm text-gray-700 summary-text">${article['article-summary'] || 'No summary available.'}</p>
              <div class="summary-fade"></div>
            </div>
          </div>
        `;
        
        card.addEventListener('click', () => renderViewer(article));
        container.appendChild(card);
      });
    }



    function renderViewer(article) {
      console.log('Opening article:', article);
      console.log('Article image_name:', article.image_name);
      
      // Create title with newspaper metadata (without location since it's in citation)
      const newspaperName = article.newspaper || 'Unknown Publication';
      const publicationDate = formatDate(article['publication-date']);
      const titleWithMetadata = `${article['article-title'] || 'Untitled Article'} - ${newspaperName}, ${publicationDate}`;
      
      // Set image with fallback
      const imagePath = `/article-scans/${article.image_name}`;
      console.log('Loading image:', imagePath, 'for article:', article['article-title']);
      
      // Transcription with proper formatting
      const transcript = (article['article-transcript'] || 'No transcription available.')
        .replace(/⏎/g, '\n')
        .split(/\n/)
        .map(paragraph => paragraph.trim())
        .filter(paragraph => paragraph.length > 0);
      const formattedTranscript = transcript.map((p, index) => {
        return `<p class='leading-snug' style='margin-bottom: 8px; text-indent: 8px;'>${p}</p>`;
      }).join('');
      
      // Use the new component's API
      if (window.articleViewer) {
        window.articleViewer.show({
          title: titleWithMetadata,
          imageUrl: imagePath,
          transcription: formattedTranscript,
          citation: article['turabian-citation'] || 'Citation not available.'
        });
      }
    }



    function applyFilters() {
      const decade = decadeInput.value;
      const state = stateInput.value;
      const publication = publicationInput.value;
      const entities = entitiesInput.value;
      
      const filtered = articles.filter(article => {
        const decadeMatch = !decade || article.decade === decade;
        const stateMatch = !state || article.state === state;
        const publicationMatch = !publication || article.newspaper === publication;
        const entitiesMatch = !entities || (article['named-entities'] && article['named-entities'].includes(entities));
        
        return decadeMatch && stateMatch && publicationMatch && entitiesMatch;
      });
      
      // Update filter options based on current selection
      updateFilterOptions(filtered);
      
      // Sort the filtered results
      const sorted = sortArticles(filtered);
      renderCards(sorted);
    }

    function updateFilterOptions(currentFiltered) {
      // Get available values for each filter based on current filtered results
      const availableDecades = [...new Set(currentFiltered.map(article => article.decade).filter(Boolean))].sort();
      const availableStates = [...new Set(currentFiltered.map(article => article.state).filter(Boolean))].sort();
      const availablePublications = [...new Set(currentFiltered.map(article => article.newspaper).filter(Boolean))].sort();
      // Only include entities from topNamedEntities (entities)
      const availableEntities = [...new Set(currentFiltered.flatMap(article => 
        article['named-entities'] ? article['named-entities'].split('@') : []
      ).filter(Boolean).filter(entity => entity !== 'nan' && entity !== 'NaN' && entities.includes(entity)))].sort();

      // Update decade options
      updateSelectOptions(decadeInput, availableDecades, 'All Decades');
      
      // Update state options
      updateSelectOptions(stateInput, availableStates, 'All States');
      
      // Update publication options
      updateSelectOptions(publicationInput, availablePublications, 'All Publications');
      
      // Update entities options
      updateSelectOptions(entitiesInput, availableEntities, 'All Entities');
    }

    function updateSelectOptions(selectElement, availableValues, defaultText) {
      const currentValue = selectElement.value;
      const currentOptions = Array.from(selectElement.options);
      
      // Clear existing options except the first one
      selectElement.innerHTML = `<option value="">${defaultText}</option>`;
      
      // Add available options
      availableValues.forEach(value => {
        const option = document.createElement('option');
        option.value = value;
        option.textContent = value;
        option.disabled = false;
        selectElement.appendChild(option);
      });
      
      // Add disabled options for unavailable values
      const allValues = getFilterValues(selectElement.id);
      allValues.forEach(value => {
        if (!availableValues.includes(value)) {
          const option = document.createElement('option');
          option.value = value;
          option.textContent = value;
          option.disabled = true;
          option.className = 'text-gray-400';
          selectElement.appendChild(option);
        }
      });
      
      // Restore current value if it's still available
      if (currentValue && availableValues.includes(currentValue)) {
        selectElement.value = currentValue;
      } else if (currentValue && !availableValues.includes(currentValue)) {
        selectElement.value = '';
      }
    }

    function getFilterValues(filterId) {
      switch (filterId) {
        case 'filter-decade':
          return [...new Set(articles.map(article => article.decade).filter(Boolean))].sort();
        case 'filter-state':
          return [...new Set(articles.map(article => article.state).filter(Boolean))].sort();
        case 'filter-publication':
          return [...new Set(articles.map(article => article.newspaper).filter(Boolean))].sort();
        case 'filter-entities':
          return entities;
        default:
          return [];
      }
    }

    function sortArticles(articlesToSort) {
      const sortBy = sortByInput.value;
      const sortOrder = sortOrderInput.value;
      
      return [...articlesToSort].sort((a, b) => {
        let aValue, bValue;
        
        switch (sortBy) {
          case 'date':
            aValue = a['publication-date'] || '';
            bValue = b['publication-date'] || '';
            break;
          case 'state':
            aValue = a.state || '';
            bValue = b.state || '';
            break;
          case 'title':
            aValue = a['article-title'] || '';
            bValue = b['article-title'] || '';
            break;
          case 'newspaper':
            aValue = a.newspaper || '';
            bValue = b.newspaper || '';
            break;
          default:
            aValue = a['publication-date'] || '';
            bValue = b['publication-date'] || '';
        }
        
        // Handle date comparison
        if (sortBy === 'date') {
          const dateA = new Date(aValue);
          const dateB = new Date(bValue);
          return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;
        }
        
        // Handle string comparison
        const comparison = aValue.localeCompare(bValue);
        return sortOrder === 'asc' ? comparison : -comparison;
      });
    }

    function clearAllFilters() {
      decadeInput.value = '';
      stateInput.value = '';
      publicationInput.value = '';
      entitiesInput.value = '';
      sortByInput.value = 'date';
      sortOrderInput.value = 'asc';
      
      // Reset all filter options to show all values
      updateFilterOptions(articles);
      renderCards(sortArticles(articles));
    }

    // Event listeners
    decadeInput.addEventListener('change', applyFilters);
    stateInput.addEventListener('change', applyFilters);
    publicationInput.addEventListener('change', applyFilters);
    entitiesInput.addEventListener('change', applyFilters);
    sortByInput.addEventListener('change', applyFilters);
    sortOrderInput.addEventListener('change', applyFilters);
    clearBtn.addEventListener('click', clearAllFilters);

    // Initialize with sorted articles and set up filter options
    updateFilterOptions(articles);
    renderCards(sortArticles(articles));
  </script>

  <style>
    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .line-clamp-4 {
      display: -webkit-box;
      -webkit-line-clamp: 4;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .line-clamp-5 {
      display: -webkit-box;
      -webkit-line-clamp: 5;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .summary-container {
      max-height: 120px;
      overflow: hidden;
    }

    .summary-text {
      margin-bottom: 0;
    }

    .summary-fade {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 40px;
      background: linear-gradient(transparent, white);
      pointer-events: none;
    }

    .bg-newspaper-offwhite {
      background-color: #faf9f6;
    }



    /* Style disabled options */
    select option:disabled {
      color: #9ca3af;
      font-style: italic;
    }

    @media (max-width: 1024px) {
      .article-viewer-flex {
        flex-direction: column;
      }
      .article-viewer-flex > div {
        width: 100% !important;
        max-width: 100% !important;
      }
    }
  </style>
</PageLayout> 