---
import PageLayout from "../../layouts/PageLayout.astro";
import ArticleViewer from "../../components/ArticleViewer.astro";
import articles from "../../data/articles.json";
import newscloud from "../../data/newscloud.json";
import "../../styles/western-colors.css";

// Process newscloud data to count entity occurrences
const entityCounts: Record<string, number> = {};
const articleEntityMap: Record<string, string[]> = {};

newscloud.forEach((item: { "named-entities"?: string; "article-id": string }) => {
  if (item["named-entities"]) {
    const entities = item["named-entities"].split("@");
    entities.forEach((entity: string) => {
      if (entity.trim()) {
        entityCounts[entity] = (entityCounts[entity] || 0) + 1;
        if (!articleEntityMap[entity]) {
          articleEntityMap[entity] = [];
        }
        articleEntityMap[entity].push(item["article-id"]);
      }
    });
  }
});

// Filter entities that appear 3 or more times and randomize order
const filteredEntities = Object.entries(entityCounts)
  .filter(([entity, count]) => count >= 3)
  .sort((a, b) => b[1] - a[1]) // Sort by count descending first
  .sort(() => Math.random() - 0.5); // Then randomize the order

// Calculate font sizes based on counts
const maxCount = Math.max(...filteredEntities.map(([_, count]) => count));
const minCount = Math.min(...filteredEntities.map(([_, count]) => count));
const maxFontSize = 28; // Further reduced from 36px
const minFontSize = 10; // Further reduced from 12px

function getFontSize(count: number): number {
  const ratio = (count - minCount) / (maxCount - minCount);
  const baseSize = Math.round(minFontSize + (ratio * (maxFontSize - minFontSize)));
  
  // Reduce font size on mobile devices
  if (typeof window !== 'undefined' && window.innerWidth <= 768) {
    return Math.max(6, Math.round(baseSize * 0.6)); // 40% smaller on mobile
  }
  
  return baseSize;
}

// Roy Rogers Western-themed color palette
// Authentic western board game colors with good contrast
const westernColorPalette = [
  { bg: '#8B4513', text: '#FFFFFF' }, // Saddle Brown - classic leather
  { bg: '#D2691E', text: '#FFFFFF' }, // Chocolate - rich brown
  { bg: '#CD853F', text: '#000000' }, // Peru - warm tan
  { bg: '#DEB887', text: '#000000' }, // Burlywood - light wood
  { bg: '#F4A460', text: '#000000' }, // Sandy Brown - desert sand
  { bg: '#DAA520', text: '#000000' }, // Goldenrod - golden wheat
  { bg: '#B8860B', text: '#FFFFFF' }, // Dark Goldenrod - deep gold
  { bg: '#8B7355', text: '#FFFFFF' }, // Tan - earth tone
  { bg: '#A0522D', text: '#FFFFFF' }, // Sienna - reddish brown
  { bg: '#BC8F8F', text: '#000000' }, // Rosy Brown - dusty rose
  { bg: '#F5DEB3', text: '#000000' }, // Wheat - pale gold
  { bg: '#D2B48C', text: '#000000' }, // Tan - light brown
  { bg: '#C19A6B', text: '#000000' }, // Medium Wood - wood grain
  { bg: '#8B7355', text: '#FFFFFF' }, // Tan - medium brown
  { bg: '#A0522D', text: '#FFFFFF' }, // Sienna - terra cotta
  { bg: '#BC8F8F', text: '#000000' }, // Rosy Brown - muted pink
  { bg: '#F5DEB3', text: '#000000' }, // Wheat - cream
  { bg: '#D2B48C', text: '#000000' }, // Tan - beige
  { bg: '#C19A6B', text: '#000000' }, // Medium Wood - oak
  { bg: '#8B7355', text: '#FFFFFF' }  // Tan - taupe
];

// Create a consistent color assignment for each entity
const entityColorMap: Record<string, { bg: string; text: string }> = {};

function getEntityColor(entity: string) {
  if (!entityColorMap[entity]) {
    const colorIndex = Object.keys(entityColorMap).length % westernColorPalette.length;
    entityColorMap[entity] = westernColorPalette[colorIndex];
  }
  return entityColorMap[entity];
}
---

<PageLayout title="News Cloud - Visualize the Data" currentPage="visualize">
  <head>
    <meta name="description" content="Explore a word cloud visualization of named entities from historical newspaper articles documenting anti-Chinese violence. Click on entities to filter articles and discover patterns in the coverage.">
  </head>
      <div class="container-wide">

    <div class="mb-6">
      <a href="/visualize" class="text-accent hover:text-accent-focus flex items-center gap-2 mb-4">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Visualizations
      </a>
      <h1 class="text-4xl font-bold mb-2">News Cloud</h1>
      <p class="text-lg text-gray-600 mb-6">
        Explore frequently mentioned locations, people, and organizations in our newspaper archive. 
        Click on any entity in the word cloud to filter articles and discover patterns across publications and time periods.
      </p>
    </div>

         <!-- Word Cloud -->
     <div class="bg-amber-50/90 border-2 border-amber-200 rounded-lg p-3 mb-4 shadow-lg relative">
       <!-- Notification for filter changes -->
       <div id="filter-notification" class="hidden absolute -top-8 left-1/2 transform -translate-x-1/2 z-10 transition-all duration-500 ease-out" style="transform: translate(-50%, -100%);">
         <span class="text-sm text-amber-700 bg-amber-100 px-4 py-2 rounded-full border border-amber-300 shadow-lg">
           Filter applied • <span id="filtered-count">0</span> articles found
         </span>
       </div>
          <div id="word-cloud" class="flex flex-wrap gap-1 justify-center items-center min-h-[160px] mb-3">
            {filteredEntities.map(([entity, count]) => {
              const fontSize = getFontSize(count);
              const colorSet = getEntityColor(entity);
              return (
                <span 
                  class="word-cloud-item cursor-pointer hover:scale-110 transition-all duration-200 font-medium shadow-sm" 
                  style={`font-size: ${fontSize}px; color: ${colorSet.text}; background: ${colorSet.bg};`}
                  data-entity={entity}
                  data-count={count}
                  title={`${entity} (${count} occurrences)`}
                >
                  {entity}
                </span>
              );
            })}
          </div>
          <div class="flex justify-between items-center pt-2 pb-0 border-t border-amber-200">
            <div id="article-count" class="text-sm text-amber-700 bg-amber-100 rounded-lg px-3 py-2 flex items-center ml-2.5">
              Showing all {articles.length} articles
            </div>
            <button id="reset-filter" class="px-4 py-2 bg-amber-100 hover:bg-amber-200 text-amber-800 font-medium rounded-md shadow-sm hover:shadow-md transition-all duration-200 border border-amber-300 hover:border-amber-400 flex items-center gap-2 text-sm mr-2.5">
              Reset Filter
            </button>
          </div>
     </div>

    <!-- Article Cards Grid -->
    <div id="cards-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"></div>

    <!-- Article Viewer Component -->
    <ArticleViewer />

    <!-- Loading State -->
    <div id="loading" class="hidden text-center py-12">
      <div class="loading loading-spinner loading-lg"></div>
      <p class="mt-4 text-gray-600">Loading articles...</p>
    </div>

    <!-- No Results State -->
    <div id="no-results" class="hidden text-center py-12">
      <div class="text-gray-400 mb-4">
        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
      </div>
      <h3 class="text-xl font-semibold mb-2">No articles found</h3>
      <p class="text-gray-600 mb-4">Try selecting a different entity from the word cloud.</p>
      <button id="reset-filters" class="btn btn-outline">Show All Articles</button>
    </div>
  </div>
  </div>

     <script define:vars={{ articles, filteredEntities, articleEntityMap }}>
     const container = document.getElementById('cards-container');
     const wordCloud = document.getElementById('word-cloud');
     const articleCount = document.getElementById('article-count');
     const resetBtn = document.getElementById('reset-filter');
     const loading = document.getElementById('loading');
     const noResults = document.getElementById('no-results');
     const filterNotification = document.getElementById('filter-notification');
     const filteredCount = document.getElementById('filtered-count');
     
     let currentFilter = null;

    function formatDate(dateString) {
      if (!dateString) return '';
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
    }

    function renderCards(filtered) {
      container.innerHTML = '';
      
      if (filtered.length === 0) {
        container.classList.add('hidden');
        noResults.classList.remove('hidden');
        articleCount.textContent = 'No articles found';
        return;
      }

      container.classList.remove('hidden');
      noResults.classList.add('hidden');
      articleCount.textContent = `Showing ${filtered.length} of ${articles.length} articles`;

      filtered.forEach((article, index) => {
        const card = document.createElement('div');
        card.className = 'card bg-base-100 shadow-md hover:shadow-lg transition-shadow cursor-pointer border border-base-300';
        card.innerHTML = `
          <div class="card-body p-4">
            <div class="flex justify-between items-start mb-3">
              <h3 class="card-title text-base font-semibold line-clamp-3 flex-1 mr-3">${article['article-title'] || 'Untitled'}</h3>
              <span class="badge badge-primary badge-sm flex-shrink-0">${article['publication-year'] || 'Unknown'}</span>
            </div>
            <p class="text-sm text-gray-600 mb-2">
              <span class="font-medium">${article.newspaper || 'Unknown Publication'}</span>${article['newspaper-location'] ? ` (${article['newspaper-location']})` : ''}
            </p>
            <p class="text-sm text-gray-500 mb-3">
              ${formatDate(article['publication-date'])}${article.page ? ` (Page ${article.page})` : ''}
            </p>
            <div class="summary-container relative">
              <p class="text-sm text-gray-700 summary-text">${article['article-summary'] || 'No summary available.'}</p>
              <div class="summary-fade"></div>
            </div>
          </div>
        `;
        
        card.addEventListener('click', () => renderViewer(article));
        container.appendChild(card);
      });
    }

    function renderViewer(article) {
      console.log('Opening article:', article);
      console.log('Article image_name:', article.image_name);
      
      // Create title with newspaper metadata
      const newspaperName = article.newspaper || 'Unknown Publication';
      const publicationDate = formatDate(article['publication-date']);
      const titleWithMetadata = `${article['article-title'] || 'Untitled Article'} - ${newspaperName}, ${publicationDate}`;
      
      // Set image with fallback
      const imagePath = `/article-scans/${article.image_name}`;
      console.log('Loading image:', imagePath, 'for article:', article['article-title']);
      
      // Transcription with proper formatting
      const transcript = (article['article-transcript'] || 'No transcription available.')
        .replace(/⏎/g, '\n')
        .split(/\n/)
        .map(paragraph => paragraph.trim())
        .filter(paragraph => paragraph.length > 0);
      const formattedTranscript = transcript.map((p, index) => {
        return `<p class='leading-snug' style='margin-bottom: 8px; text-indent: 8px;'>${p}</p>`;
      }).join('');
      
      // Use the new component's API
      if (window.articleViewer) {
        window.articleViewer.show({
          title: titleWithMetadata,
          imageUrl: imagePath,
          transcription: formattedTranscript,
          citation: article['turabian-citation'] || 'Citation not available.'
        });
      }
    }

         function filterByEntity(entity) {
       if (!entity || !articleEntityMap[entity]) {
         renderCards(articles);
         currentFilter = null;
         hideFilterNotification();
         return;
       }

       const articleIds = articleEntityMap[entity];
       const filtered = articles.filter(article => articleIds.includes(article['article-id']));
       
       currentFilter = entity;
       renderCards(filtered);
       showFilterNotification(filtered.length);
     }

     function showFilterNotification(count) {
       // Clear any existing timeout
       if (window.filterNotificationTimeout) {
         clearTimeout(window.filterNotificationTimeout);
       }
       
       // First, clear the count to show transition
       filteredCount.textContent = '';
       
       // Show notification with slide-in effect
       filterNotification.classList.remove('hidden');
       filterNotification.style.transform = 'translate(-50%, 0)';
       
       // After a brief delay, show the new count
       setTimeout(() => {
         filteredCount.textContent = count;
       }, 200);
       
       // Auto-hide after 5 seconds (longer duration)
       window.filterNotificationTimeout = setTimeout(() => {
         filterNotification.style.opacity = '0';
         setTimeout(() => {
           filterNotification.classList.add('hidden');
           filterNotification.style.opacity = '1';
         }, 500);
       }, 5000);
     }

     function hideFilterNotification() {
       // Clear any existing timeout
       if (window.filterNotificationTimeout) {
         clearTimeout(window.filterNotificationTimeout);
       }
       
       // Fade out effect
       filterNotification.style.opacity = '0';
       setTimeout(() => {
         filterNotification.classList.add('hidden');
         filterNotification.style.opacity = '1';
       }, 500);
     }

     function resetFilter() {
       currentFilter = null;
       renderCards(articles);
       hideFilterNotification();
       
       // Remove active state from all word cloud items
       document.querySelectorAll('.word-cloud-item').forEach(item => {
         item.classList.remove('ring-2', 'ring-amber-400', 'ring-offset-2');
       });
     }

    // Event listeners
    wordCloud.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-cloud-item')) {
        const entity = e.target.dataset.entity;
        
        // Remove active state from all items
        document.querySelectorAll('.word-cloud-item').forEach(item => {
          item.classList.remove('ring-2', 'ring-amber-400', 'ring-offset-2');
        });
        
        // Add active state to clicked item
        e.target.classList.add('ring-2', 'ring-amber-400', 'ring-offset-2');
        
        filterByEntity(entity);
      }
    });

    resetBtn.addEventListener('click', resetFilter);

    // Initialize with all articles
    renderCards(articles);
  </script>

  <style>
    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .line-clamp-4 {
      display: -webkit-box;
      -webkit-line-clamp: 4;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .line-clamp-5 {
      display: -webkit-box;
      -webkit-line-clamp: 5;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .summary-container {
      max-height: 120px;
      overflow: hidden;
    }

    .summary-text {
      margin-bottom: 0;
    }

    .summary-fade {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 40px;
      background: linear-gradient(transparent, white);
      pointer-events: none;
    }

    .word-cloud-item {
      display: inline-block;
      margin: 1px;
      padding: 3px 6px;
      border-radius: 6px;
      transition: all 0.3s ease;
      border: 2px solid rgba(0, 0, 0, 0.15);
      box-shadow: 
        0 2px 4px rgba(0, 0, 0, 0.2),
        inset 0 1px 0 rgba(255, 255, 255, 0.3);
      position: relative;
      overflow: hidden;
      font-weight: 700;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
      letter-spacing: 0.5px;
      text-transform: uppercase;
      font-family: 'Georgia', serif;
    }

    .word-cloud-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
      transition: left 0.5s ease;
    }

    .word-cloud-item:hover {
      transform: scale(1.1) translateY(-2px);
      z-index: 10;
      box-shadow: 
        0 6px 16px rgba(0, 0, 0, 0.3),
        inset 0 1px 0 rgba(255, 255, 255, 0.4);
      border-color: rgba(0, 0, 0, 0.25);
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .word-cloud-item:hover::before {
      left: 100%;
    }

         @media (max-width: 1024px) {
       .article-viewer-flex {
         flex-direction: column;
       }
       .article-viewer-flex > div {
         width: 100% !important;
         max-width: 100% !important;
       }
     }

     /* Mobile-specific word cloud adjustments */
     @media (max-width: 768px) {
       #word-cloud {
         min-height: 120px !important;
         gap: 1px !important;
       }
       
       .word-cloud-item {
         margin: 1px !important;
         padding: 1px 4px !important;
         border-radius: 4px !important;
         font-size: 8px !important;
       }
       
       /* Reduce container padding on mobile */
       .bg-amber-50\/90 {
         padding: 0.75rem !important;
         margin-bottom: 1rem !important;
       }
     }

     /* Extra small screens */
     @media (max-width: 480px) {
       #word-cloud {
         min-height: 120px !important;
       }
       
       .word-cloud-item {
         padding: 1px 4px !important;
         font-size: 9px !important;
       }
     }

     .p-4 {
       padding: .5rem;
     }
  </style>
</PageLayout> 