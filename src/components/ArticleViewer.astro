---
// ArticleViewer.astro - Reusable article popup viewer component
export interface Props {
  id?: string;
  className?: string;
}

const { id = "article-viewer", className = "" } = Astro.props;
---

<!-- Article Viewer Modal -->
<div id={id} class={`hidden fixed inset-0 bg-black/75 z-[100] flex items-center justify-center p-2 lg:p-4 ${className}`}
  role="dialog" aria-modal="true" aria-labelledby="viewer-title">
  <div class="bg-newspaper-offwhite rounded-lg shadow-xl max-w-7xl w-full max-h-[95vh] lg:max-h-[95vh] overflow-hidden">
    <div class="p-4 lg:p-6 border-b border-base-300">
      <div class="flex justify-between items-start">
        <h2 class="text-lg lg:text-2xl font-bold text-white" id="viewer-title" tabindex="-1"></h2>
        <button id="close-viewer" class="btn btn-ghost btn-sm text-white" aria-label="Close article viewer">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
    
            <div class="flex flex-col lg:flex-row h-[calc(95vh-120px)]">
          <!-- Image Panel with Zoom/Pan -->
          <div class="lg:w-1/2 p-2 lg:p-4 lg:border-r border-base-300" style="background-color: #faf9f6;">
            <div class="relative h-full">
              <!-- Mobile: Fixed height, Desktop: Full height -->
              <div id="image-container" class="relative w-full h-64 lg:h-full overflow-hidden bg-white border border-base-300 rounded-lg">
                <img id="viewer-image" class="w-full h-full object-contain" alt="Article image" />
                <div id="image-loading" class="absolute inset-0 bg-base-200 rounded-lg flex items-center justify-center">
                  <div class="loading loading-spinner loading-lg"></div>
                </div>
                <div id="image-error" class="hidden absolute inset-0 bg-base-200 rounded-lg flex items-center justify-center">
                  <div class="text-center text-gray-500">
                    <svg class="w-16 h-16 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                    <p class="text-sm">Image not available</p>
                  </div>
                </div>
              </div>
              
              <!-- Zoom Controls -->
              <div class="absolute top-4 left-4 flex flex-col gap-2 rounded-lg p-2 shadow-lg" style="background-color: #faf9f6;">
                <button id="zoom-in" class="btn btn-circle btn-sm btn-primary" title="Zoom In (Click)" aria-label="Zoom in on article image">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
                  </svg>
                </button>
                <button id="zoom-out" class="btn btn-circle btn-sm btn-primary" title="Zoom Out (Shift+Click or Right Click)" aria-label="Zoom out of article image">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM13 10h-6"></path>
                  </svg>
                </button>
                <button id="reset-zoom" class="btn btn-circle btn-sm btn-outline" title="Reset Zoom" aria-label="Reset image zoom and pan">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
          
          <!-- Transcript Panel -->
          <div class="lg:w-1/2 p-2 lg:p-4 flex flex-col" style="background-color: #faf9f6;">
            <!-- Mobile: Scrollable transcript area, Desktop: Full height -->
            <div class="flex-1 overflow-hidden">
              <h3 class="text-lg font-semibold mb-2 lg:mb-3">Transcription</h3>
              <div id="viewer-transcription" class="h-64 lg:h-full overflow-y-auto border border-base-300 rounded-lg p-4 bg-white text-sm leading-snug whitespace-pre-wrap"></div>
            </div>
            
            <!-- Citation - Always at bottom -->
            <div class="mt-4 p-3 bg-base-200 rounded-lg">
              <h4 class="text-sm font-medium mb-2">Citation</h4>
              <p class="text-xs text-gray-600" id="viewer-citation"></p>
            </div>
          </div>
        </div>
  </div>
</div>

<script>
  // Focus trap and accessibility helpers
  function getFocusableElements(container) {
    return Array.from(container.querySelectorAll(
      'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex]:not([tabindex="-1"])'
    ));
  }

  // Article Viewer functionality
  class ArticleViewer {
    constructor(containerId = 'article-viewer') {
      this.container = document.getElementById(containerId);
      this.image = document.getElementById('viewer-image');
      this.title = document.getElementById('viewer-title');
      this.transcription = document.getElementById('viewer-transcription');
      this.citation = document.getElementById('viewer-citation');
      this.closeBtn = document.getElementById('close-viewer');
      this.zoomInBtn = document.getElementById('zoom-in');
      this.zoomOutBtn = document.getElementById('zoom-out');
      this.resetZoomBtn = document.getElementById('reset-zoom');
      this.imageContainer = document.getElementById('image-container');
      this.imageLoading = document.getElementById('image-loading');
      this.imageError = document.getElementById('image-error');
      this.lastActiveElement = null;
      this.currentScale = 1;
      this.isDragging = false;
      this.dragStart = { x: 0, y: 0 };
      this.currentTranslate = { x: 0, y: 0 };
      this.init();
    }
    
    init() {
      // Close modal
      this.closeBtn?.addEventListener('click', () => this.close());
      // Close on backdrop click
      this.container?.addEventListener('click', (e) => {
        if (e.target === this.container) this.close();
      });
      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !this.container.classList.contains('hidden')) this.close();
        // Focus trap
        if (!this.container.classList.contains('hidden') && (e.key === 'Tab' || e.keyCode === 9)) {
          this.trapFocus(e);
        }
      });
      // Zoom controls
      this.zoomInBtn?.addEventListener('click', () => this.zoomIn());
      this.zoomOutBtn?.addEventListener('click', () => this.zoomOut());
      this.resetZoomBtn?.addEventListener('click', () => this.resetZoom());
      // Image panning
      this.setupImagePanning();
    }

    trapFocus(e) {
      const focusableEls = getFocusableElements(this.container);
      if (!focusableEls.length) return;
      const firstEl = focusableEls[0];
      const lastEl = focusableEls[focusableEls.length - 1];
      const isTab = e.key === 'Tab' || e.keyCode === 9;
      if (!isTab) return;
      if (e.shiftKey) {
        if (document.activeElement === firstEl) {
          e.preventDefault();
          lastEl.focus();
        }
      } else {
        if (document.activeElement === lastEl) {
          e.preventDefault();
          firstEl.focus();
        }
      }
    }
    
    setupImagePanning() {
      if (!this.image) return;
      
      // Mouse events
      this.image.addEventListener('mousedown', (e) => this.startDrag(e));
      document.addEventListener('mousemove', (e) => this.drag(e));
      document.addEventListener('mouseup', () => this.endDrag());
      
      // Touch events for mobile
      this.image.addEventListener('touchstart', (e) => this.startDrag(e));
      document.addEventListener('touchmove', (e) => this.drag(e));
      document.addEventListener('touchend', () => this.endDrag());
      
      // Zoom on click
      this.image.addEventListener('click', (e) => {
        if (e.shiftKey) {
          this.zoomOut();
        } else {
          this.zoomIn();
        }
      });
      
      // Right click to zoom out
      this.image.addEventListener('contextmenu', (e) => {
        e.preventDefault();
        this.zoomOut();
      });
    }
    
    startDrag(e) {
      if (this.currentScale <= 1) return;
      
      this.isDragging = true;
      const point = e.touches ? e.touches[0] : e;
      this.dragStart = { x: point.clientX, y: point.clientY };
    }
    
    drag(e) {
      if (!this.isDragging) return;
      
      e.preventDefault();
      const point = e.touches ? e.touches[0] : e;
      const deltaX = point.clientX - this.dragStart.x;
      const deltaY = point.clientY - this.dragStart.y;
      
      this.currentTranslate.x += deltaX;
      this.currentTranslate.y += deltaY;
      
      this.updateImageTransform();
      this.dragStart = { x: point.clientX, y: point.clientY };
    }
    
    endDrag() {
      this.isDragging = false;
    }
    
    updateImageTransform() {
      if (!this.image) return;
      
      this.image.style.transform = `scale(${this.currentScale}) translate(${this.currentTranslate.x / this.currentScale}px, ${this.currentTranslate.y / this.currentScale}px)`;
    }
    
    zoomIn() {
      this.currentScale = Math.min(this.currentScale * 1.5, 5);
      this.updateImageTransform();
    }
    
    zoomOut() {
      this.currentScale = Math.max(this.currentScale / 1.5, 0.5);
      this.updateImageTransform();
    }
    
    resetZoom() {
      this.currentScale = 1;
      this.currentTranslate = { x: 0, y: 0 };
      this.updateImageTransform();
    }
    
    show(articleData) {
      if (!this.container) return;
      // Store last focused element
      this.lastActiveElement = document.activeElement;
      // Set content
      this.title.textContent = articleData.title || 'Article';
      this.transcription.innerHTML = articleData.transcription || 'No transcription available';
      this.citation.textContent = articleData.citation || 'Citation not available';
      // Load image
      this.loadImage(articleData.imageUrl);
      // Show modal
      this.container.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      // Reset zoom
      this.resetZoom();
      // Focus the modal title (or close button)
      setTimeout(() => {
        const focusableEls = getFocusableElements(this.container);
        if (focusableEls.length) {
          focusableEls[0].focus();
        } else {
          this.title.focus();
        }
      }, 0);
    }
    
    loadImage(imageUrl) {
      if (!this.image || !imageUrl) {
        this.showImageError();
        return;
      }
      
      this.showImageLoading();
      
      const img = new Image();
      img.onload = () => {
        this.image.src = imageUrl;
        this.hideImageLoading();
        this.hideImageError();
      };
      
      img.onerror = () => {
        this.showImageError();
        this.hideImageLoading();
      };
      
      img.src = imageUrl;
    }
    
    showImageLoading() {
      this.imageLoading?.classList.remove('hidden');
      this.imageError?.classList.add('hidden');
    }
    
    hideImageLoading() {
      this.imageLoading?.classList.add('hidden');
    }
    
    showImageError() {
      this.imageError?.classList.remove('hidden');
      this.imageLoading?.classList.add('hidden');
    }
    
    hideImageError() {
      this.imageError?.classList.add('hidden');
    }
    
    close() {
      if (!this.container) return;
      
      this.container.classList.add('hidden');
      document.body.style.overflow = '';
      // Restore focus to last active element
      if (this.lastActiveElement && typeof this.lastActiveElement.focus === 'function') {
        setTimeout(() => this.lastActiveElement.focus(), 0);
      }
    }
  }
  
  // Initialize the article viewer
  const articleViewer = new ArticleViewer();
  
  // Make it globally available for other scripts
  window.articleViewer = articleViewer;
</script>

<style>
  #close-viewer svg {
    stroke: white;
  }
  #close-viewer {
    color: white;
  }
</style> 